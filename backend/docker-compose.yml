services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - inventory-order-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - inventory-order-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - inventory-order-network

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventoryorder
    networks:
      - inventory-order-network

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    networks:
      - inventory-order-network

  inventory-service:
    build:
      context: ./microservices/InventoryService
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "8080:8080"
      - "9091:9091"  # Exposing gRPC port
    environment:
      SERVER_PORT: 8080
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/inventoryorder
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      GRPC_SERVER_PORT: 9091
    depends_on:
      - postgres
      - kafka
    networks:
      - inventory-order-network

  order-service:
    build:
      context: ./microservices/orderService
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8081:8081"
      - "9095:9095"  # Exposing gRPC port
    environment:
      SERVER_PORT: 8081
      SPRING_DATA_MONGODB_HOST: mongodb
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: orderservice
      SPRING_DATA_MONGODB_USERNAME: root
      SPRING_DATA_MONGODB_PASSWORD: password
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      GRPC_SERVER_PORT: 9095
    depends_on:
      - mongodb
      - kafka
      - inventory-service
    networks:
      - inventory-order-network

networks:
  inventory-order-network:
    driver: bridge

volumes:
  mongodb_data:
  postgres_data: